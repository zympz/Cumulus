<apex:page standardController="Allocation__c" recordSetVar="allocations" extensions="ALLO_ManageAllocations_CTRL" title="Manage Allocations" tabStyle="Allocation__c" showHeader="true" sidebar="true" cache="false" >
    <apex:slds />
    <apex:includeScript value="{!URLFOR($Resource.CumulusStaticResources, '/jquery/jquery-1.10.2.min.js')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.CumulusStaticResources, '/npsp-slds/npsp-common.css')}" />

    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script type="text/javascript">
    (function($) {

        var sumAmount;
        
        var parentAmount = {!parentAmount};
        var decimalSeparator = "{!decimalSeparator}";
        var thousandsSeparator = "{!thousandsSeparator}";
        var defaultEnabled = {!Settings.Default_Allocations_Enabled__c};

        function isLightningExperienceOrSalesforce1() {
            return((typeof sforce != 'undefined') && sforce && (!!sforce.one));
        }

        function urlHome() {
            if (isLightningExperienceOrSalesforce1()) {
                sforce.one.navigateToURL('one.app#/sObject/{!objectAPIName}/home');
            } else {
                window.location.assign('/{!keyPrefix}/o');
            }
        }

        //adds all amount fields together
        var calcAmount = function() {
            sumAmount = 0;
            $('.alloAmount').each(function(i,o){
                var thisRowAmount = $('.amount'+i);
                var thisRowPercent = $('.percent'+i);

                //if amount and percent are blank, enable them both
                if (isBlankOrEmpty(thisRowAmount)){
                    if (isBlankOrEmpty(thisRowPercent)) {
                        //make amount field editable, nulled out
                        thisRowPercent.prop('disabled', false);
                        thisRowAmount.prop('disabled', false);    
                    }
                    
                } else {
                //if amount is full and percent is blank, disable percent
                    if (isBlankOrEmpty(thisRowPercent)) {
                        thisRowPercent.prop('disabled', true);
                    }
                }

                // create a regex expression to remove the thousands separator from the string
                var re = new RegExp("\\"+thousandsSeparator,"g");
                // remove all currency symbols, whitespace characters and thousands separators from the string
                // before attempting to convert it to a numeric value
                var cleanedAmt = amt=thisRowAmount.val().replace(/[\$£€]/g, '').replace(/\s/g,'').replace(re,'');
                if (decimalSeparator !== ".") {
                    // JS does not recognize decimal separators other than a period
                    re = new RegExp("\\"+decimalSeparator,"g");
                    cleanedAmt = cleanedAmt.replace(re,'.');
                }
                if (!isNaN(cleanedAmt)) {
                    sumAmount += Math.round(cleanedAmt*100);
                }

            });

            //write total amount. if we have a parent amount, include the unallocated remainder. 
            //if we're over the parent amount, make it red.
            if (parentAmount > 0) {
                var unallocated = (Math.round((parentAmount*100) - sumAmount)/100).toFixed(2);
                $('#totalAmount').text(reformatCurrency(unallocated));
                if (unallocated < 0) {
                    $('#totalAmount').css({ "color": "red", "font-weight": "bold" });
                    $('[id$="saveCloseBTN"]').attr('disabled','disabled');
                } else {
                    $('#totalAmount').css({ "color": "black", "font-weight": "normal" });
                    $('[id$="saveCloseBTN"]').removeAttr('disabled');
                }
            } else {
                $('#totalAmount').text(reformatCurrency((Math.round(sumAmount)/100).toFixed(2)));
            }
            
        }

        //adds all percent fields together
        var calcPercent = function() {
            $('.alloPercent').each(function(i,o){
                //selector variable for each row
                var thisRowAmount = $('.amount'+i);
                var thisRowPercent = $('.percent'+i);

                //grey out amount field if needed
                if (thisRowPercent.val() == '' || !thisRowPercent.val()){
                    //calc amount here if possible
                    thisRowAmount.prop('disabled', false);
                } else {
                    thisRowAmount.prop('disabled', true);
                    //if we have a parent amount, set the calculated amount based on the percent
                    if (parentAmount > 0) {
                        var pct = thisRowPercent.val();
                        // if the users locale uses commas as the decimal separator, replace
                        // those with a period so it works with js. don't have to worry about
                        // the thousands separator for percentages.
                        if (decimalSeparator !== ".") {
                            var re = new RegExp("\\"+decimalSeparator,"g");
                            pct = pct.replace(/\s/g,'').replace(re,'.');
                        }
                        var amt = (Math.round(pct * parentAmount)/100).toFixed(2);
                        if (amt !== 'NaN') {
                            thisRowAmount.val(reformatCurrency(amt));
                        }
                    }
                }
            });
            
        }

        var changePercent = function(i) {
            var thisRowAmount = $('.amount'+i);
            var thisRowPercent = $('.percent'+i);
            if (isBlankOrEmpty(thisRowPercent)) {
                thisRowAmount.val('');
            }
            initOrReload();
        }

        var reformatCurrency = function(amt) {
            if (decimalSeparator !== ".") {
                amt = amt.replace(".",decimalSeparator);
            }
            return amt;
        }

        var isBlankOrEmpty = function (selector){
            return (selector.val() == '' || !selector.val());
        }

        var initOrReload = function() {
            calcPercent();
            calcAmount();
        }

        //bind functions to window that are needed in the page
        window.initOrReload = initOrReload;
        window.changePercent = changePercent;
        window.urlHome = urlHome;
    })(jQuery);

    </script>
    <apex:form id="theForm">
        <div class="slds">
            <!-- PAGE HEADER -->
            <c:UTIL_PageHeader showBreadcrumb="true" parentEntityLabel="{!objectLabelPlural}"
                parentAction="javascript:window.urlHome();" parentRecordName="{!objectName}"
                parentRecordAction="/{!parentId}" header="{!pageTitle}" icon="custom_120" iconCategory="standard"
                cancelAction="{!cancel}" saveAction="{!saveClose}" saveDisabled="{!opp<>null&&parentAmount==0}"/>
            <div> 
                <apex:pageMessages id="messages"/>
            </div>
            <div>
                <apex:outputPanel id="theTable">
                <table class="slds-table slds-table_bordered slds-table_cell-buffer" >
                    <thead>
                        <tr class="slds-text-heading_label">
                            <th scope="col"><span class="slds-truncate">{!$ObjectType.Allocation__c.Fields.General_Accounting_Unit__c.Label}</span></th>
                            <th scope="col" width="250px"><span class="slds-truncate">{!$ObjectType.Allocation__c.Fields.Amount__c.Label}</span></th>
                            <th scope="col" width="130px"><span class="slds-truncate">{!$ObjectType.Allocation__c.Fields.Percent__c.Label}</span></th>
                            <th scope="col" width="200px"></th>
                        </tr>
                    </thead>
                    <tbody>
                        <apex:variable var="cnt" value="{!0}" /> 
                        <apex:repeat var="allo" value="{!listAllo}" >
                            <tr>
                                <td>
                                    <div class="slds-form-element">
                                        <label for="alloInputGAU{!cnt}" class="slds-form-element__label slds-assistive-text">{!$ObjectType.Allocation__c.Fields.General_Accounting_Unit__c.Label} {!cnt}</label>
                                        <div id="alloInputGAU{!cnt}" >
                                            <c:UTIL_InputField sObj="{!Allo}" sObjType="Allocation__c" field="General_Accounting_Unit__c"/>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div class="slds-form-element">
                                        <label for="{!$Component.alloInputAmount}" class="slds-form-element__label slds-assistive-text">{!$ObjectType.Allocation__c.Fields.Amount__c.Label} {!cnt}</label>
                                        <div class="slds-form-element__control slds-input-has-fixed-addon">
                                            <span class="slds-form-element__addon">{!currencySymbol}</span>
                                            <apex:inputField id="alloInputAmount" styleClass="slds-input alloAmount amount{!cnt}" onkeyup="window.initOrReload()"  value="{!Allo.Amount__c}"/>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div class="slds-form-element">
                                        <label for="{!$Component.alloInputPercent}" class="slds-form-element__label slds-assistive-text">{!$ObjectType.Allocation__c.Fields.Percent__c.Label} {!cnt}</label>
                                        <div class="slds-form-element__control slds-input-has-fixed-addon">
                                            <apex:inputField id="alloInputPercent" styleClass="slds-input slds-size_2-of-3 alloPercent percent{!cnt}" onkeyup="window.changePercent({!cnt})" value="{!Allo.Percent__c}"/>
                                            <span class="slds-form-element__addon">%</span>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <apex:commandButton styleClass="slds-button slds-button_destructive" value="{!$Label.alloDeleteRow}" id="delRowBTN" title="{!$Label.alloDeleteRow}" action="{!delRow}" reRender="theTable" immediate="true">
                                        <span class="slds-form-element__label slds-assistive-text">Delete Row {!cnt}</span>
                                        <apex:param name="rowForDel" value="{!cnt}" assignTo="{!rowNumber}"/>
                                    </apex:commandButton>
                                    <apex:commandButton styleClass="slds-button slds-button_neutral" value="{!$Label.alloAddRow}" id="addRowBTN" title="{!$Label.alloAddRow}" action="{!addRow}" reRender="theTable" immediate="true">
                                        <span class="slds-form-element__label slds-assistive-text">{!$Label.alloAddRowAtPosition} {!cnt}</span>
                                        <apex:param name="rowForNew" value="{!cnt}" assignTo="{!rowNumber}"/>
                                    </apex:commandButton>
                                </td>
                            </tr>
                            <apex:variable var="cnt" value="{!cnt+1}"/>
                        </apex:repeat>
                        <tr class="active">
                            <td>
                                <apex:outputField value="{!defaultAllo.General_Accounting_Unit__c}"/>
                            </td>
                            <td>
                                <div class="slds-form-element">
                                    <div class="slds-form-element__control">
                                        <span class="slds-form-element__addon">{!currencySymbol}</span>
                                        <span class="slds-form-element__static" id="totalAmount"></span>
                                    </div>
                                </div>
                            </td>
                            <td>
                            </td>
                            <td>
                                <apex:commandButton styleClass="slds-button slds-button_neutral slds-button_small" value="{!$Label.alloAddRow}" id="addRowBTN" title="{!$Label.alloAddRow}" action="{!addRow}" reRender="theTable" immediate="true" rendered="{!listAlloSize==0}">
                                    <span class="slds-form-element__label slds-assistive-text">{!$Label.alloAddRowAtPosition} {!cnt}</span>
                                    <apex:param name="rowForNew" value="{!cnt}" assignTo="{!rowNumber}"/>
                                </apex:commandButton>
                            </td>
                        </tr>
                   </tbody>
                </table>
                <script>
                    window.initOrReload();
                </script>
                </apex:outputPanel>
            </div>
        </div>
    </apex:form>
</apex:page>